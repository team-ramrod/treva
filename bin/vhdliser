#!/usr/bin/env ruby

module PaddedBinaryOutput
  def padded_binary(width)
    to_s(2).rjust(width,'0')
  end
end

Fixnum.send(:include, PaddedBinaryOutput)

puts <<END
--
--	leros_rom.vhd
--
--	generic VHDL version of ROM
--
--		DONT edit this file!
--		generated by vhdliser
--

library ieee;
use ieee.std_logic_1164.all;

entity leros_rom is
port (
    address : in std_logic_vector(8 downto 0);
    q : out std_logic_vector(15 downto 0)
);
end leros_rom;

architecture rtl of leros_rom is

begin

process(address) begin

case address is
#{
  $stdin.bytes.each_slice(2).each_with_index.map do |op_and_arg,addr|
    op, arg = op_and_arg
    %Q{    when "#{addr.padded_binary(9)}" => q <= "#{op.padded_binary(8) + arg.padded_binary(8)}";}
  end.join "\n"
}
    when others => q <= "0000000000000000";
end case;
end process;

end rtl;
END
